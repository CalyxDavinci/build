From 843fd3e78987def8b30872d310e2ccd1b897428e Mon Sep 17 00:00:00 2001
From: Yuntao Xu <yuntaoxu@google.com>
Date: Fri, 21 Jan 2022 14:08:48 -0800
Subject: [PATCH] support slice product variables from Make to Soong

1. Added support to pass slice product variables from Make to Soong;
2. Add two product variables in Soong, which is used in converting the
   updater in Make;

Bug: 205649904
Test: TreeHugger
Change-Id: I4f7596e78a47d8e4815b3ae48ab3dda9237b3bf5
---
 android/variable.go      |  91 +++++++++++++++++++++++++--
 android/variable_test.go | 132 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 217 insertions(+), 6 deletions(-)

diff --git a/android/variable.go b/android/variable.go
index 373891ae4..4be1c4655 100644
--- a/android/variable.go
+++ b/android/variable.go
@@ -58,6 +58,15 @@ type variableProperties struct {
 			Base_dir *string
 		}
 
+		Target_recovery_updater_libs struct {
+			Static_libs []string
+			Cmd         *string
+		}
+
+		Target_recovery_updater_extra_libs struct {
+			Static_libs []string
+		}
+
 		// unbundled_build is a catch-all property to annotate modules that don't build in one or
 		// more unbundled branches, usually due to dependencies missing from the manifest.
 		Unbundled_build struct {
@@ -443,6 +452,9 @@ type productVariables struct {
 	SepolicyFreezeTestExtraPrebuiltDirs []string `json:",omitempty"`
 
 	GenerateAidlNdkPlatformBackend bool `json:",omitempty"`
+
+	Target_recovery_updater_libs       *[]string `json:",omitempty"`
+	Target_recovery_updater_extra_libs *[]string `json:",omitempty"`
 }
 
 func boolPtr(v bool) *bool {
@@ -1087,7 +1099,13 @@ func printfIntoProperties(ctx BottomUpMutatorContext, prefix string,
 			}
 		case reflect.Slice:
 			for j := 0; j < propertyValue.Len(); j++ {
-				err := printfIntoProperty(propertyValue.Index(j), variableValue)
+				var err error
+				switch variableValue.(type) {
+				case []string:
+					err = printfSliceValIntoProperty(propertyValue, j, variableValue)
+				default:
+					err = printfIntoProperty(propertyValue.Index(j), variableValue)
+				}
 				if err != nil {
 					printfIntoPropertiesError(ctx, prefix, productVariablePropertyValue, i, err)
 				}
@@ -1102,18 +1120,78 @@ func printfIntoProperties(ctx BottomUpMutatorContext, prefix string,
 	}
 }
 
-func printfIntoProperty(propertyValue reflect.Value, variableValue interface{}) error {
-	s := propertyValue.String()
+func printfSliceValIntoProperty(propVals reflect.Value, idx int, variableValue interface{}) error {
+	if idx >= propVals.Len() {
+		return nil
+	}
+	propVal := propVals.Index(idx)
+	err := checkSlicePrintLine(propVals)
+	if err != nil {
+		return err
+	}
+	printLine, err := checkPrintLine(propVal)
+	if err != nil {
+		return err
+	}
+	// if has no % char
+	if len(printLine) == 0 {
+		return nil
+	}
+	varVals := reflect.ValueOf(variableValue)
+	printVals := reflect.ValueOf(&[]string{}).Elem()
+	for i := 0; i < varVals.Len(); i++ {
+		// print and append all the elements to a temp slice
+		s := reflect.ValueOf(fmt.Sprintf(printLine, varVals.Index(i).Interface()))
+		printVals.Set(reflect.Append(printVals, s))
+	}
+	// 1. delete the propVals.Index(idx) element
+	// 2. insert the printed temp slice starting at position idx of propVals
+	propVals.Set(reflect.AppendSlice(propVals.Slice(0, idx),
+		reflect.AppendSlice(printVals.Slice(0, printVals.Len()), propVals.Slice(idx+1, propVals.Len()))))
+	return nil
+}
 
+// for slice product variable properties, the number of elements with a single % char at most is 1
+func checkSlicePrintLine(propertyValues reflect.Value) error {
+	count := 0
+	for i := 0; i < propertyValues.Len(); i++ {
+		printLine, err := checkPrintLine(propertyValues.Index(i))
+		if err != nil {
+			return err
+		}
+		if len(printLine) == 0 {
+			continue
+		}
+		count++
+		if count > 1 {
+			return fmt.Errorf("slice product variable properties only support at most one element with a single '%%'")
+		}
+	}
+	return nil
+}
+
+func checkPrintLine(propertyValue reflect.Value) (string, error) {
+	s := propertyValue.String()
 	count := strings.Count(s, "%")
 	if count == 0 {
-		return nil
+		return "", nil
 	}
-
 	if count > 1 {
-		return fmt.Errorf("product variable properties only support a single '%%'")
+		return "", fmt.Errorf("product variable properties only support a single '%%'")
 	}
+	return s, nil
+}
 
+func printfIntoProperty(propertyValue reflect.Value, variableValue interface{}) error {
+	s, err := checkPrintLine(propertyValue)
+	if err != nil {
+		return err
+	}
+	// if has no % char
+	if len(s) == 0 {
+		return nil
+	}
+	// when only has a single % char
 	if strings.Contains(s, "%d") {
 		switch v := variableValue.(type) {
 		case int:
@@ -1131,6 +1209,7 @@ func printfIntoProperty(propertyValue reflect.Value, variableValue interface{})
 		switch variableValue.(type) {
 		case string:
 			// Nothing
+		case []string:
 		default:
 			return fmt.Errorf("unsupported type %T for %%s", variableValue)
 		}
diff --git a/android/variable_test.go b/android/variable_test.go
index 928bca609..64faa76a3 100644
--- a/android/variable_test.go
+++ b/android/variable_test.go
@@ -15,8 +15,10 @@
 package android
 
 import (
+	"fmt"
 	"reflect"
 	"strconv"
+	"strings"
 	"testing"
 
 	"github.com/google/blueprint/proptools"
@@ -126,6 +128,136 @@ func TestPrintfIntoProperty(t *testing.T) {
 	}
 }
 
+type printfSliceIntoPropertyTestCase struct {
+	in  []string
+	val interface{}
+	out string
+	err bool
+}
+
+var nonEmptyList = []string{
+	"a",
+	"b",
+	"c",
+}
+
+var emptyList = []string{}
+
+var printfSliceValIntoPropertyTestCases = []printfSliceIntoPropertyTestCase{
+	{
+		in:  []string{"foo", "bar", "baz"},
+		val: nonEmptyList,
+		out: "[foo bar baz]",
+	},
+	{
+		in:  []string{"%s"},
+		val: nonEmptyList,
+		out: "[a b c]",
+	},
+	{
+		in:  []string{"foo1", "foo2", "%s"},
+		val: nonEmptyList,
+		out: "[foo1 foo2 a b c]",
+	},
+	{
+		in:  []string{"foo1", "foo2", "%s", "foo3", "foo4"},
+		val: nonEmptyList,
+		out: "[foo1 foo2 a b c foo3 foo4]",
+	},
+	{
+		in:  []string{"foo1", "foo2", "bar/%s", "foo3", "foo4"},
+		val: nonEmptyList,
+		out: "[foo1 foo2 bar/a bar/b bar/c foo3 foo4]",
+	},
+	{
+		in:  []string{"foo", "%%s"},
+		val: nonEmptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "%s", "%s"},
+		val: nonEmptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "bar/%s", "baz-%s"},
+		val: nonEmptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "%s", "%d"},
+		val: nonEmptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "bar", "baz"},
+		val: emptyList,
+		out: "[foo bar baz]",
+	},
+	{
+		in:  []string{"%s"},
+		val: emptyList,
+		out: "[]",
+	},
+	{
+		in:  []string{"foo1", "foo2", "%s"},
+		val: emptyList,
+		out: "[foo1 foo2]",
+	},
+	{
+		in:  []string{"foo1", "foo2", "%s", "foo3", "foo4"},
+		val: emptyList,
+		out: "[foo1 foo2 foo3 foo4]",
+	},
+	{
+		in:  []string{"foo1", "foo2", "bar/%s", "foo3", "foo4"},
+		val: emptyList,
+		out: "[foo1 foo2 foo3 foo4]",
+	},
+	{
+		in:  []string{"foo", "%%s"},
+		val: emptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "%s", "%s"},
+		val: emptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "bar/%s", "baz-%s"},
+		val: emptyList,
+		err: true,
+	},
+	{
+		in:  []string{"foo", "%s", "%d"},
+		val: emptyList,
+		err: true,
+	},
+}
+
+func TestPrintfSliceValIntoProperty(t *testing.T) {
+	for _, testCase := range printfSliceValIntoPropertyTestCases {
+		s := testCase.in
+		r := reflect.ValueOf(&s).Elem()
+		idx := 0
+		for i := 0; i < r.Len(); i++ {
+			if strings.Contains(r.Index(i).String(), "%") {
+				idx = i
+				break
+			}
+		}
+		err := printfSliceValIntoProperty(r, idx, testCase.val)
+		if err != nil && !testCase.err {
+			t.Errorf("unexpected error %s", err)
+		} else if err == nil && testCase.err {
+			t.Errorf("expected error")
+		} else if err == nil && (fmt.Sprintf("%s", r)) != testCase.out {
+			t.Errorf("expected %q got %q", testCase.out, fmt.Sprintf("%s", r))
+		}
+	}
+}
+
 type testProductVariableModule struct {
 	ModuleBase
 }
-- 
2.37.3

