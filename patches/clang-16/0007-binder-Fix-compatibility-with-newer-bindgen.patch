From 3fadb47502756f053eb31a59c919c2b1994b26c4 Mon Sep 17 00:00:00 2001
From: Jens Reidel <adrian@travitia.xyz>
Date: Thu, 10 Nov 2022 23:13:47 +0200
Subject: [PATCH 3/3] binder: Fix compatibility with newer bindgen

Change-Id: I085c024a18c34d601ea944681fc330bf6ba03b22
Signed-off-by: Jens Reidel <adrian@travitia.xyz>
---
 libs/binder/rust/src/parcel/parcelable.rs | 14 +++-----------
 1 file changed, 3 insertions(+), 11 deletions(-)

diff --git a/libs/binder/rust/src/parcel/parcelable.rs b/libs/binder/rust/src/parcel/parcelable.rs
index 0c7e48df0c..c88201876a 100644
--- a/libs/binder/rust/src/parcel/parcelable.rs
+++ b/libs/binder/rust/src/parcel/parcelable.rs
@@ -22,7 +22,7 @@ use crate::sys;
 
 use std::convert::{TryFrom, TryInto};
 use std::ffi::c_void;
-use std::os::raw::{c_char, c_ulong};
+use std::os::raw::c_char;
 use std::mem::{self, MaybeUninit, ManuallyDrop};
 use std::ptr;
 use std::slice;
@@ -103,12 +103,8 @@ pub trait SerializeArray: Serialize + Sized {
 unsafe extern "C" fn serialize_element<T: Serialize>(
     parcel: *mut sys::AParcel,
     array: *const c_void,
-    index: c_ulong,
+    index: usize,
 ) -> status_t {
-    // c_ulong and usize are the same, but we need the explicitly sized version
-    // so the function signature matches what bindgen generates.
-    let index = index as usize;
-
     let slice: &[T] = slice::from_raw_parts(array.cast(), index+1);
 
     let mut parcel = match BorrowedParcel::from_raw(parcel) {
@@ -161,12 +157,8 @@ pub trait DeserializeArray: Deserialize {
 unsafe extern "C" fn deserialize_element<T: Deserialize>(
     parcel: *const sys::AParcel,
     array: *mut c_void,
-    index: c_ulong,
+    index: usize,
 ) -> status_t {
-    // c_ulong and usize are the same, but we need the explicitly sized version
-    // so the function signature matches what bindgen generates.
-    let index = index as usize;
-
     let vec = &mut *(array as *mut Option<Vec<MaybeUninit<T>>>);
     let vec = match vec {
         Some(v) => v,
-- 
2.38.1

