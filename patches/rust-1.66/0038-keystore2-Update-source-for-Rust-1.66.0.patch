From 3db0e6ef10a8d7b2c815cf22a2d0416048f82883 Mon Sep 17 00:00:00 2001
From: Jens Reidel <adrian@travitia.xyz>
Date: Sat, 17 Dec 2022 23:41:38 +0200
Subject: [PATCH] keystore2: Update source for Rust 1.66.0

Change-Id: I29d0bcdac31f5f5d263c36b2d48db222376b5a9b
Signed-off-by: Jens Reidel <adrian@travitia.xyz>
---
 keystore2/aaid/lib.rs           | 2 +-
 keystore2/legacykeystore/lib.rs | 2 +-
 keystore2/src/async_task.rs     | 2 +-
 keystore2/src/crypto/lib.rs     | 2 +-
 keystore2/src/database.rs       | 2 +-
 keystore2/src/legacy_blob.rs    | 2 +-
 keystore2/src/utils.rs          | 2 +-
 keystore2/src/watchdog.rs       | 2 +-
 8 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/keystore2/aaid/lib.rs b/keystore2/aaid/lib.rs
index 3187198c..8f6a09e5 100644
--- a/keystore2/aaid/lib.rs
+++ b/keystore2/aaid/lib.rs
@@ -29,7 +29,7 @@ pub fn get_aaid(uid: u32) -> Result<Vec<u8>, u32> {
     // in the second pointer argument.
     let status = unsafe { aaid_keystore_attestation_id(uid, buffer.as_mut_ptr(), &mut size) };
     match status {
-        0 => Ok(buffer[0..size as usize].to_vec()),
+        0 => Ok(buffer[0..size].to_vec()),
         status => Err(status),
     }
 }
diff --git a/keystore2/legacykeystore/lib.rs b/keystore2/legacykeystore/lib.rs
index ed5bd4fe..e8ed2ee8 100644
--- a/keystore2/legacykeystore/lib.rs
+++ b/keystore2/legacykeystore/lib.rs
@@ -505,7 +505,7 @@ impl LegacyKeystore {
                 if let Some(key) = SUPER_KEY
                     .read()
                     .unwrap()
-                    .get_per_boot_key_by_user_id(uid_to_android_user(uid as u32))
+                    .get_per_boot_key_by_user_id(uid_to_android_user(uid))
                 {
                     key.decrypt(ciphertext, iv, tag)
                 } else {
diff --git a/keystore2/src/async_task.rs b/keystore2/src/async_task.rs
index 0515c8f8..6548445f 100644
--- a/keystore2/src/async_task.rs
+++ b/keystore2/src/async_task.rs
@@ -67,7 +67,7 @@ impl Shelf {
     pub fn get_mut<T: Any + Send + Default>(&mut self) -> &mut T {
         self.0
             .entry(TypeId::of::<T>())
-            .or_insert_with(|| Box::new(T::default()) as Box<dyn Any + Send>)
+            .or_insert_with(|| Box::<T>::default() as Box<dyn Any + Send>)
             .downcast_mut::<T>()
             .unwrap()
     }
diff --git a/keystore2/src/crypto/lib.rs b/keystore2/src/crypto/lib.rs
index 7ba47c88..9f05262a 100644
--- a/keystore2/src/crypto/lib.rs
+++ b/keystore2/src/crypto/lib.rs
@@ -361,7 +361,7 @@ pub fn ec_key_marshal_private_key(key: &ECKey) -> Result<ZVec, Error> {
     // This will not write past the specified length of the buffer; if the
     // len above is too short, it returns 0.
     let written_len =
-        unsafe { ECKEYMarshalPrivateKey(key.0, buf.as_mut_ptr(), buf.len()) } as usize;
+        unsafe { ECKEYMarshalPrivateKey(key.0, buf.as_mut_ptr(), buf.len()) };
     if written_len == len {
         Ok(buf)
     } else {
diff --git a/keystore2/src/database.rs b/keystore2/src/database.rs
index 1be02b42..b52b7e1a 100644
--- a/keystore2/src/database.rs
+++ b/keystore2/src/database.rs
@@ -830,7 +830,7 @@ impl AuthTokenEntry {
     pub fn satisfies(&self, user_secure_ids: &[i64], auth_type: HardwareAuthenticatorType) -> bool {
         user_secure_ids.iter().any(|&sid| {
             (sid == self.auth_token.userId || sid == self.auth_token.authenticatorId)
-                && (((auth_type.0 as i32) & (self.auth_token.authenticatorType.0 as i32)) != 0)
+                && ((auth_type.0 & self.auth_token.authenticatorType.0) != 0)
         })
     }
 
diff --git a/keystore2/src/legacy_blob.rs b/keystore2/src/legacy_blob.rs
index 7cf1819b..2ffcc711 100644
--- a/keystore2/src/legacy_blob.rs
+++ b/keystore2/src/legacy_blob.rs
@@ -321,7 +321,7 @@ impl LegacyBlobLoader {
                     acc.push(c as char);
                 }
                 c => {
-                    acc.push((b'+' + (c as u8 >> 6)) as char);
+                    acc.push((b'+' + (c >> 6)) as char);
                     acc.push((b'0' + (c & 0x3F)) as char);
                 }
             };
diff --git a/keystore2/src/utils.rs b/keystore2/src/utils.rs
index 9db2eb9d..f4d17052 100644
--- a/keystore2/src/utils.rs
+++ b/keystore2/src/utils.rs
@@ -220,7 +220,7 @@ pub fn get_current_time_in_milliseconds() -> i64 {
     // Following unsafe block includes one system call to get monotonic time.
     // Therefore, it is not considered harmful.
     unsafe { libc::clock_gettime(libc::CLOCK_MONOTONIC_RAW, &mut current_time) };
-    current_time.tv_sec as i64 * 1000 + (current_time.tv_nsec as i64 / 1_000_000)
+    current_time.tv_sec * 1000 + (current_time.tv_nsec / 1_000_000)
 }
 
 /// Converts a response code as returned by the Android Protected Confirmation HIDL compatibility
diff --git a/keystore2/src/watchdog.rs b/keystore2/src/watchdog.rs
index a26b632a..01043c55 100644
--- a/keystore2/src/watchdog.rs
+++ b/keystore2/src/watchdog.rs
@@ -141,7 +141,7 @@ impl WatchdogState {
             },
         );
         // Put the groups back into a vector.
-        let mut groups: Vec<Vec<(&Index, &Record)>> = groups.into_iter().map(|(_, v)| v).collect();
+        let mut groups: Vec<Vec<(&Index, &Record)>> = groups.into_values().collect();
         // Sort the groups by start time of the most recent (.last()) of each group.
         // It is panic safe to use unwrap() here because we never add empty vectors to
         // the map.
-- 
2.38.1

